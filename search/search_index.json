{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Android Device Manager","text":"<p>Android Device Manager is a modern Python library to automate and control Android programmatically.</p>"},{"location":"#features","title":"\ud83d\ude80 Features","text":""},{"location":"#avd-management","title":"\ud83d\udce6 AVD Management","text":"<ul> <li>Create AVDs programmatically from system images</li> <li>List existing AVDs and check availability</li> <li>Delete AVDs cleanly</li> <li>Validate AVD names according to Android rules</li> <li>Force recreation of AVDs with <code>force=True</code></li> </ul>"},{"location":"#emulator-control","title":"\u25b6\ufe0f Emulator Control","text":"<ul> <li>Start emulators in headless or windowed mode</li> <li>Automatic port allocation for multiple running instances</li> <li>Stop emulators gracefully or force-kill when needed</li> <li>Custom emulator options via <code>EmulatorConfiguration</code></li> </ul>"},{"location":"#adb-integration","title":"\ud83d\udce1 ADB Integration","text":"<ul> <li>Execute <code>adb</code> commands directly from Python</li> <li>Install APKs and manage applications (install/uninstall)</li> <li>List installed packages and check if a package is installed</li> <li>Push and pull files between host and device</li> <li>Access <code>logcat</code> output and clear logs</li> </ul>"},{"location":"#requirements","title":"\ud83d\udc0d Requirements","text":"<ul> <li>Python: 3.10 or higher</li> <li>Android SDK: Latest version recommended</li> <li>System Resources: Sufficient RAM and storage for emulators</li> </ul>"},{"location":"#installation","title":"\ud83d\udce6 Installation","text":"<p>Follow the Installation Guide</p> <pre><code>pip install android-device-manager\n</code></pre>"},{"location":"#quick-example","title":"\u26a1 Quick Example","text":"<pre><code>from android_device_manager import AndroidDevice\nfrom android_device_manager.avd import AVDConfiguration\nfrom android_device_manager.emulator import EmulatorConfiguration\n\navd_config = AVDConfiguration(\n    name=\"test_avd_from_lib\", \n    package=\"system-images;android-36;google_apis;x86_64\"\n)\n\nemulator_config = EmulatorConfiguration(\n    no_window=True,\n)\n\nwith AndroidDevice(avd_config,emulator_config) as device:\n    print(device.name)\n</code></pre>"},{"location":"troubleshooting/","title":"Troubleshooting","text":"<p>This section describes common issues you may encounter when using <code>android-device-manager</code>, along with recommended solutions.</p>"},{"location":"api/","title":"API Reference","text":"<p>Detailed API documentation for Android Device Manager.</p>"},{"location":"api/#contents","title":"\ud83d\udd17 Contents","text":"<ul> <li>AndroidDevice</li> <li>ADB</li> <li>AVD</li> <li>Emulator</li> <li>Constants</li> </ul>"},{"location":"api/adb/","title":"ADB Module","text":"<p>Interact with Android Debug Bridge (ADB).</p>"},{"location":"api/adb/#android_device_manager.adb.client","title":"<code>android_device_manager.adb.client</code>","text":""},{"location":"api/adb/#android_device_manager.adb.client-classes","title":"Classes","text":""},{"location":"api/adb/#android_device_manager.adb.client.AdbClient","title":"<code>AdbClient</code>","text":"<p>A client for interacting with an Android emulator/device via the Android Debug Bridge (ADB).</p>"},{"location":"api/adb/#android_device_manager.adb.client.AdbClient-functions","title":"Functions","text":""},{"location":"api/adb/#android_device_manager.adb.client.AdbClient.__init__","title":"<code>__init__(emulator_port, android_sdk=None)</code>","text":"<p>Initialize the AdbClient.</p> <p>Parameters:</p> Name Type Description Default <code>emulator_port</code> <code>int</code> <p>The TCP port number of the emulator (e.g., 5554).</p> required <code>android_sdk</code> <code>AndroidSDK</code> <p>The Android SDK abstraction providing the adb path.</p> <code>None</code>"},{"location":"api/adb/#android_device_manager.adb.client.AdbClient.get_all_props","title":"<code>get_all_props(timeout=10)</code>","text":"<p>Get all Android system properties as a dictionary.</p> <p>Parameters:</p> Name Type Description Default <code>timeout</code> <code>int</code> <p>Timeout in seconds.</p> <code>10</code> <p>Returns:</p> Type Description <code>dict[str, str]</code> <p>dict[str, str]: All system properties as {key: value}</p> <p>Raises:</p> Type Description <code>ADBError</code> <p>On failure.</p>"},{"location":"api/adb/#android_device_manager.adb.client.AdbClient.get_prop","title":"<code>get_prop(key, timeout=10, check=True)</code>","text":"<p>Get a single Android system property via adb.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>str or AndroidProp</code> <p>The name of the property, or an AndroidProp Enum.</p> required <code>timeout</code> <code>int</code> <p>Timeout in seconds.</p> <code>10</code> <code>check</code> <code>bool</code> <p>Raise if the command fails.</p> <code>True</code> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>Value of the property, or '' if not found.</p> <p>Raises:</p> Type Description <code>ADBError</code> <p>If the adb command fails.</p>"},{"location":"api/adb/#android_device_manager.adb.client.AdbClient.wait_for_boot","title":"<code>wait_for_boot(timeout=120)</code>","text":"<p>Wait for the emulator to fully boot (until 'sys.boot_completed' is set).</p> <p>Parameters:</p> Name Type Description Default <code>timeout</code> <code>int</code> <p>Maximum time to wait in seconds (default: 120).</p> <code>120</code> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if the device booted successfully before the timeout.</p> <p>Raises:</p> Type Description <code>TimeoutError</code> <p>If the device did not boot in the specified time.</p>"},{"location":"api/adb/#android_device_manager.adb.client.AdbClient.kill_emulator","title":"<code>kill_emulator()</code>","text":"<p>Kill (terminate) the emulator instance via ADB.</p> <p>Raises:</p> Type Description <code>ADBError</code> <p>If the emulator could not be killed.</p>"},{"location":"api/adb/#android_device_manager.adb.client.AdbClient.root","title":"<code>root(timeout=10, check=True)</code>","text":"<p>Restart adbd with root permissions, if possible.</p> <p>Parameters:</p> Name Type Description Default <code>timeout</code> <code>int</code> <p>Timeout for the command (default: 10s)</p> <code>10</code> <code>check</code> <code>bool</code> <p>Raise if the command fails.</p> <code>True</code> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if adbd is now running as root, False otherwise.</p> <p>Raises:</p> Type Description <code>ADBError</code> <p>On failure to restart adbd.</p>"},{"location":"api/adb/#android_device_manager.adb.client.AdbClient.is_root","title":"<code>is_root(timeout=10)</code>","text":"<p>Check if adbd is running as root on the device.</p> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if running as root, False otherwise.</p>"},{"location":"api/adb/#android_device_manager.adb.client.AdbClient.list_installed_packages","title":"<code>list_installed_packages()</code>","text":"<p>List installed package names on the device. Returns:     list[str]: Package names. Raises:     ADBError: On failure.</p>"},{"location":"api/adb/#android_device_manager.adb.client.AdbClient.install_apk","title":"<code>install_apk(apk_path, timeout=60)</code>","text":"<p>Install an APK file on the device.</p> <p>Parameters:</p> Name Type Description Default <code>apk_path</code> <code>str</code> <p>Path to the APK file on the host.</p> required <code>timeout</code> <code>int</code> <p>Timeout in seconds for the installation.</p> <code>60</code> <p>Raises:</p> Type Description <code>ADBError</code> <p>If the installation fails.</p>"},{"location":"api/adb/#android_device_manager.adb.client.AdbClient.install_multi_package","title":"<code>install_multi_package(apk_paths, timeout=120)</code>","text":"<p>Install multiple APKs in a single transaction using 'adb install-multi-package'.</p> <p>Parameters:</p> Name Type Description Default <code>apk_paths</code> <code>list[str]</code> <p>List of APK file paths on the host.</p> required <code>timeout</code> <code>int</code> <p>Timeout in seconds for the installation.</p> <code>120</code> <p>Raises:</p> Type Description <code>ADBError</code> <p>If the installation fails.</p>"},{"location":"api/adb/#android_device_manager.adb.client.AdbClient.uninstall_package","title":"<code>uninstall_package(package_name, keep_data=False, timeout=60)</code>","text":"<p>Uninstall a package from the device.</p> <p>Parameters:</p> Name Type Description Default <code>package_name</code> <code>str</code> <p>The full package name to uninstall.</p> required <code>keep_data</code> <code>bool</code> <p>If True, keep app data and cache (default: False).</p> <code>False</code> <code>timeout</code> <code>int</code> <p>Timeout in seconds.</p> <code>60</code> <p>Raises:</p> Type Description <code>ADBError</code> <p>If the uninstallation fails.</p>"},{"location":"api/adb/#android_device_manager.adb.client.AdbClient.push_file","title":"<code>push_file(local, remote, timeout=60, check=True)</code>","text":"<p>Push a file from the local host to the device.</p> <p>Parameters:</p> Name Type Description Default <code>local</code> <code>str | Path</code> <p>Path to the local file.</p> required <code>remote</code> <code>str</code> <p>Destination path on the device (e.g., /sdcard/file.txt).</p> required <code>timeout</code> <code>int</code> <p>Timeout in seconds.</p> <code>60</code> <code>check</code> <code>bool</code> <p>Raise exception on failure.</p> <code>True</code> <p>Raises:</p> Type Description <code>ADBError</code> <p>If the command fails.</p> <code>ADBTimeoutError</code> <p>On timeout.</p>"},{"location":"api/adb/#android_device_manager.adb.client.AdbClient.pull_file","title":"<code>pull_file(remote, local, timeout=60, check=True)</code>","text":"<p>Pull a file from the device to the local host.</p> <p>Parameters:</p> Name Type Description Default <code>remote</code> <code>str</code> <p>Path to the file on the device.</p> required <code>local</code> <code>str | Path</code> <p>Destination path on the host.</p> required <code>timeout</code> <code>int</code> <p>Timeout in seconds.</p> <code>60</code> <code>check</code> <code>bool</code> <p>Raise exception on failure.</p> <code>True</code> <p>Raises:</p> Type Description <code>ADBError</code> <p>If the command fails.</p> <code>ADBTimeoutError</code> <p>On timeout.</p>"},{"location":"api/adb/#android_device_manager.adb.client.AdbClient.get_logcat","title":"<code>get_logcat(filter_spec=None, timeout=30, check=True)</code>","text":"<p>Retrieve logcat output from the device.</p> <p>Parameters:</p> Name Type Description Default <code>filter_spec</code> <code>Optional[List[str]]</code> <p>List of filter spec strings, e.g., ['*:E', 'ActivityManager:I']</p> <code>None</code> <code>timeout</code> <code>int</code> <p>Timeout for the command.</p> <code>30</code> <code>check</code> <code>bool</code> <p>Raise on non-zero exit code.</p> <code>True</code> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>Logcat output (stdout).</p> <p>Raises:</p> Type Description <code>ADBError</code> <p>If adb command fails.</p> <code>ADBTimeoutError</code> <p>On timeout.</p>"},{"location":"api/adb/#android_device_manager.adb.client.AdbClient.clear_logcat","title":"<code>clear_logcat(timeout=10, check=True)</code>","text":"<p>Clear the device logcat buffer.</p> <p>Parameters:</p> Name Type Description Default <code>timeout</code> <code>int</code> <p>Timeout for the command (default: 10 seconds).</p> <code>10</code> <code>check</code> <code>bool</code> <p>If True, raise if the command fails.</p> <code>True</code> <p>Raises:</p> Type Description <code>ADBError</code> <p>If the command fails.</p> <code>AVDTimeoutError</code> <p>On timeout.</p>"},{"location":"api/adb/#android_device_manager.adb.client.AdbClient.shell","title":"<code>shell(cmd, timeout=30, check=True)</code>","text":"<p>Execute a shell command on the device/emulator via ADB.</p> <p>Parameters:</p> Name Type Description Default <code>cmd</code> <code>list[str]</code> <p>The shell command as a list of arguments. Example: [\"ls\", \"/sdcard\"]</p> required <code>timeout</code> <code>int</code> <p>Timeout for the command (default: 30).</p> <code>30</code> <code>check</code> <code>bool</code> <p>If True, raise an exception for non-zero exit code.</p> <code>True</code> <p>Returns:</p> Type Description <code>CompletedProcess</code> <p>subprocess.CompletedProcess: The result object (stdout, stderr, etc.).</p> <p>Raises:</p> Type Description <code>ADBError</code> <p>If the command fails (and check=True).</p> <code>ADBTimeoutError</code> <p>On timeout.</p>"},{"location":"api/adb/#android_device_manager.adb.exceptions","title":"<code>android_device_manager.adb.exceptions</code>","text":""},{"location":"api/adb/#android_device_manager.adb.exceptions-classes","title":"Classes","text":""},{"location":"api/adb/#android_device_manager.adb.exceptions.ADBTimeoutError","title":"<code>ADBTimeoutError</code>","text":"<p>               Bases: <code>AndroidDeviceManagerError</code></p> <p>Raised when a timeout occurs during an ADB operation.</p>"},{"location":"api/adb/#android_device_manager.adb.exceptions.ADBError","title":"<code>ADBError</code>","text":"<p>               Bases: <code>AndroidDeviceManagerError</code></p> <p>Raised for any error encountered while running an ADB (Android Debug Bridge) command.</p> <p>Attributes:</p> Name Type Description <code>return_code</code> <code>Optional[int]</code> <p>The process return code, if available.</p> <code>cmd</code> <code>Optional[Any]</code> <p>The command that was executed.</p> <code>stdout</code> <code>Optional[str]</code> <p>The standard output from the failed command.</p> <code>stderr</code> <code>Optional[str]</code> <p>The standard error from the failed command.</p> <code>serial</code> <code>Optional[str]</code> <p>The emulator/device serial associated with the error, if relevant.</p> <p>Parameters:</p> Name Type Description Default <code>message</code> <code>str</code> <p>A descriptive error message.</p> required <code>return_code</code> <code>Optional[int]</code> <p>The process return code.</p> <code>None</code> <code>cmd</code> <code>Optional[Any]</code> <p>The command executed (as a list or string).</p> <code>None</code> <code>stdout</code> <code>Optional[str]</code> <p>Output from stdout.</p> <code>None</code> <code>stderr</code> <code>Optional[str]</code> <p>Output from stderr.</p> <code>None</code> <code>serial</code> <code>Optional[str]</code> <p>The serial of the target device.</p> <code>None</code>"},{"location":"api/android_device/","title":"AndroidDevice","text":"<p>High-level class for managing Android devices.</p>"},{"location":"api/android_device/#android_device_manager.android_device.AndroidDevice","title":"<code>android_device_manager.android_device.AndroidDevice</code>","text":""},{"location":"api/android_device/#android_device_manager.android_device.AndroidDevice-attributes","title":"Attributes","text":""},{"location":"api/android_device/#android_device_manager.android_device.AndroidDevice.name","title":"<code>name</code>  <code>property</code>","text":"<p>The name of the managed AVD.</p> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>The name of the AVD.</p>"},{"location":"api/android_device/#android_device_manager.android_device.AndroidDevice-functions","title":"Functions","text":""},{"location":"api/android_device/#android_device_manager.android_device.AndroidDevice.create","title":"<code>create(force=False)</code>","text":"<p>Create the AVD if it does not exist.</p> <p>Parameters:</p> Name Type Description Default <code>force</code> <code>bool</code> <p>If True, overwrite any existing AVD with the same name.</p> <code>False</code> <p>Raises:</p> Type Description <code>AVDCreationError</code> <p>If the AVD cannot be created.</p>"},{"location":"api/android_device/#android_device_manager.android_device.AndroidDevice.delete","title":"<code>delete()</code>","text":"<p>Delete the AVD.</p> <p>Raises:</p> Type Description <code>AVDDeletionError</code> <p>If deletion fails.</p>"},{"location":"api/android_device/#android_device_manager.android_device.AndroidDevice.start","title":"<code>start()</code>","text":"<p>Start the emulator for the current AVD and wait for it to boot.</p> <p>Raises:</p> Type Description <code>EmulatorStartError</code> <p>If the emulator fails to start.</p> <code>ADBError</code> <p>If there is an error communicating with the device.</p> <code>TimeoutError</code> <p>If the emulator does not boot within the allowed time.</p>"},{"location":"api/android_device/#android_device_manager.android_device.AndroidDevice.stop","title":"<code>stop()</code>","text":"<p>Stop the running emulator and release resources.</p> <p>Raises:</p> Type Description <code>Exception</code> <p>If stopping the emulator fails.</p>"},{"location":"api/android_device/#android_device_manager.android_device.AndroidDevice.get_prop","title":"<code>get_prop(key, timeout=10, check=True)</code>","text":"<p>Retrieve a single Android system property from the device.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>str or AndroidProp</code> <p>The name of the property, or an AndroidProp Enum.</p> required <code>timeout</code> <code>int</code> <p>Timeout in seconds for the adb command (default: 10).</p> <code>10</code> <code>check</code> <code>bool</code> <p>Whether to raise an exception if the command fails (default: True).</p> <code>True</code> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>The value of the requested property, or an empty string if not found.</p> <p>Raises:</p> Type Description <code>AndroidDeviceError</code> <p>If the device is not started or the ADB client is not initialized.</p> <code>ADBError</code> <p>If there is a failure in communicating with the device.</p>"},{"location":"api/android_device/#android_device_manager.android_device.AndroidDevice.get_all_props","title":"<code>get_all_props(timeout=10)</code>","text":"<p>Retrieve all Android system properties from the device as a dictionary.</p> <p>Parameters:</p> Name Type Description Default <code>timeout</code> <code>int</code> <p>Timeout in seconds for the adb command (default: 10).</p> <code>10</code> <p>Returns:</p> Type Description <code>dict[str, str]</code> <p>dict[str, str]: A dictionary mapping property names to their values.</p> <p>Raises:</p> Type Description <code>AndroidDeviceError</code> <p>If the device is not started or the ADB client is not initialized.</p> <code>ADBError</code> <p>If there is a failure in communicating with the device.</p>"},{"location":"api/android_device/#android_device_manager.android_device.AndroidDevice.root","title":"<code>root()</code>","text":"<p>Restart the ADB daemon with root privileges.</p> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if the device is now running in root mode, False otherwise.</p> <p>Raises:</p> Type Description <code>AndroidDeviceError</code> <p>If the device is not started or the ADB client is not initialized.</p> <code>ADBError</code> <p>If the operation fails.</p>"},{"location":"api/android_device/#android_device_manager.android_device.AndroidDevice.unroot","title":"<code>unroot()</code>","text":"<p>Restart the ADB daemon without root privileges (back to user mode).</p> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if the device is now running in unrooted mode, False otherwise.</p> <p>Raises:</p> Type Description <code>AndroidDeviceError</code> <p>If the device is not started or the ADB client is not initialized.</p> <code>ADBError</code> <p>If the operation fails.</p>"},{"location":"api/android_device/#android_device_manager.android_device.AndroidDevice.is_root","title":"<code>is_root()</code>","text":"<p>Check if the ADB daemon is currently running with root privileges.</p> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if the device is running in root mode, False otherwise.</p> <p>Raises:</p> Type Description <code>AndroidDeviceError</code> <p>If the device is not started or the ADB client is not initialized.</p> <code>ADBError</code> <p>If the operation fails.</p>"},{"location":"api/android_device/#android_device_manager.android_device.AndroidDevice.list_installed_packages","title":"<code>list_installed_packages()</code>","text":"<p>List all installed package names on the device.</p> <p>Returns:</p> Type Description <code>list[str]</code> <p>list[str]: A list of installed package names.</p> <p>Raises:</p> Type Description <code>AndroidDeviceError</code> <p>If the device is not running or the ADB client is not initialized.</p> <code>ADBError</code> <p>If the command fails.</p>"},{"location":"api/android_device/#android_device_manager.android_device.AndroidDevice.is_package_installed","title":"<code>is_package_installed(package_name)</code>","text":"<p>Check if a given package is installed on the device.</p> <p>Parameters:</p> Name Type Description Default <code>package_name</code> <code>str</code> <p>The package name to check.</p> required <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if the package is installed, False otherwise.</p> <p>Raises:</p> Type Description <code>AndroidDeviceError</code> <p>If the device is not running or the ADB client is not initialized.</p> <code>ADBError</code> <p>If the command fails.</p>"},{"location":"api/android_device/#android_device_manager.android_device.AndroidDevice.install_apk","title":"<code>install_apk(apk_path, timeout=30)</code>","text":"<p>Install an APK on the device.</p> <p>Parameters:</p> Name Type Description Default <code>apk_path</code> <code>str</code> <p>The file path to the APK.</p> required <code>timeout</code> <code>int</code> <p>Timeout in seconds for the installation process (default: 30).</p> <code>30</code> <p>Raises:</p> Type Description <code>AndroidDeviceError</code> <p>If the device is not running or the ADB client is not initialized.</p> <code>ADBError</code> <p>If the command fails.</p>"},{"location":"api/android_device/#android_device_manager.android_device.AndroidDevice.install_multi_package","title":"<code>install_multi_package(apk_paths, timeout=60)</code>","text":"<p>Install multiple APKs on the device in a single transaction.</p> <p>Parameters:</p> Name Type Description Default <code>apk_paths</code> <code>list[str]</code> <p>A list of file paths to the APKs.</p> required <code>timeout</code> <code>int</code> <p>Timeout in seconds for the installation process (default: 60).</p> <code>60</code> <p>Raises:</p> Type Description <code>AndroidDeviceError</code> <p>If the device is not running or the ADB client is not initialized.</p> <code>ADBError</code> <p>If the command fails.</p>"},{"location":"api/android_device/#android_device_manager.android_device.AndroidDevice.uninstall_package","title":"<code>uninstall_package(package_name, keep_data=False)</code>","text":"<p>Uninstall a package from the device.</p> <p>Parameters:</p> Name Type Description Default <code>package_name</code> <code>str</code> <p>The name of the package to uninstall.</p> required <code>keep_data</code> <code>bool</code> <p>If True, application data and cache are retained (default: False).</p> <code>False</code> <p>Raises:</p> Type Description <code>AndroidDeviceError</code> <p>If the device is not running, the ADB client is not initialized, or the package is not installed.</p> <code>ADBError</code> <p>If the command fails.</p>"},{"location":"api/android_device/#android_device_manager.android_device.AndroidDevice.push_file","title":"<code>push_file(local, remote)</code>","text":"<p>Push a file from the local machine to the device.</p> <p>Parameters:</p> Name Type Description Default <code>local</code> <code>str or Path</code> <p>Path to the local file to push.</p> required <code>remote</code> <code>str</code> <p>Destination path on the device.</p> required <p>Raises:</p> Type Description <code>AndroidDeviceError</code> <p>If the device is not running or the ADB client is not initialized.</p> <code>ADBError</code> <p>If the command fails.</p>"},{"location":"api/android_device/#android_device_manager.android_device.AndroidDevice.pull_file","title":"<code>pull_file(remote, local)</code>","text":"<p>Pull a file from the device to the local machine.</p> <p>Parameters:</p> Name Type Description Default <code>remote</code> <code>str</code> <p>Path to the file on the device.</p> required <code>local</code> <code>str or Path</code> <p>Destination path on the local machine.</p> required <p>Raises:</p> Type Description <code>AndroidDeviceError</code> <p>If the device is not running or the ADB client is not initialized.</p> <code>ADBError</code> <p>If the command fails.</p>"},{"location":"api/android_device/#android_device_manager.android_device.AndroidDevice.pull_data_partition","title":"<code>pull_data_partition(dest_path='./data.tar')</code>","text":"<p>Archive and pull the entire /data partition from the device.</p> <p>The method switches to root mode, stops the Android runtime, archives the /data directory to a tar, pulls it to the local machine, removes the archive on the device, restarts Android, and returns to unrooted mode.</p> <p>Parameters:</p> Name Type Description Default <code>dest_path</code> <code>str or Path</code> <p>Local destination path for the pulled tarball (default: \"./data.tar\").</p> <code>'./data.tar'</code> <p>Raises:</p> Type Description <code>AndroidDeviceError</code> <p>If the device is not running or the ADB client is not initialized.</p> <code>ADBError</code> <p>If any command fails during the process.</p>"},{"location":"api/android_device/#android_device_manager.android_device.AndroidDevice.get_logcat","title":"<code>get_logcat(filter_spec=None)</code>","text":"<p>Retrieve the current logcat output from the device.</p> <p>Parameters:</p> Name Type Description Default <code>filter_spec</code> <code>Optional[List[str]]</code> <p>Optional list of logcat filters (e.g. ['*:E', 'ActivityManager:I']).</p> <code>None</code> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>The logcat output as a string.</p> <p>Raises:</p> Type Description <code>AndroidDeviceError</code> <p>If the device is not running or the ADB client is not initialized.</p> <code>ADBError</code> <p>If the command fails.</p>"},{"location":"api/android_device/#android_device_manager.android_device.AndroidDevice.clear_logcat","title":"<code>clear_logcat()</code>","text":"<p>Clear the device's logcat logs.</p> <p>Raises:</p> Type Description <code>AndroidDeviceError</code> <p>If the device is not running or the ADB client is not initialized.</p> <code>ADBError</code> <p>If the command fails.</p>"},{"location":"api/android_device/#android_device_manager.android_device.AndroidDevice.shell","title":"<code>shell(args, timeout=30, check=True)</code>","text":"<p>Execute a shell command on the device/emulator via ADB, with safety checks for forbidden commands.</p> <p>Parameters:</p> Name Type Description Default <code>args</code> <code>List[str]</code> <p>The shell command as a list of arguments (e.g., [\"ls\", \"/sdcard\"]).</p> required <code>timeout</code> <code>int</code> <p>Timeout in seconds for the command (default: 30).</p> <code>30</code> <code>check</code> <code>bool</code> <p>If True, raise an exception for non-zero exit code.</p> <code>True</code> <p>Returns:</p> Type Description <code>CompletedProcess</code> <p>subprocess.CompletedProcess: The result object containing stdout, stderr, and exit code.</p> <p>Raises:</p> Type Description <code>AndroidDeviceError</code> <p>If the command is forbidden (e.g., stop, reboot, poweroff). If the device is not running or the ADB client is not initialized.</p> <code>ADBError</code> <p>If the shell command fails (when check is True).</p> <code>ADBTimeoutError</code> <p>On timeout.</p>"},{"location":"api/android_device/#android_device_manager.android_device.AndroidDevice.__enter__","title":"<code>__enter__()</code>","text":"<p>Context manager entry: ensure device is created and started.</p>"},{"location":"api/android_device/#android_device_manager.android_device.AndroidDevice.__exit__","title":"<code>__exit__(exc_type, exc_val, exc_tb)</code>","text":"<p>Context manager exit: stop the emulator and (optionally) delete the AVD.</p>"},{"location":"api/avd/","title":"AVD Module","text":"<p>Manage Android Virtual Devices (AVDs).</p>"},{"location":"api/avd/#android_device_manager.avd.AVDManager","title":"<code>android_device_manager.avd.AVDManager</code>","text":"<p>High-level manager for Android Virtual Devices (AVDs).</p>"},{"location":"api/avd/#android_device_manager.avd.AVDManager-functions","title":"Functions","text":""},{"location":"api/avd/#android_device_manager.avd.AVDManager.__init__","title":"<code>__init__(sdk)</code>","text":"<p>Initialize the AVDManager.</p> <p>Parameters:</p> Name Type Description Default <code>sdk</code> <code>AndroidSDK</code> <p>The Android SDK abstraction for resolving paths.</p> required"},{"location":"api/avd/#android_device_manager.avd.AVDManager.create","title":"<code>create(config, force=False)</code>","text":"<p>Create a new AVD with the specified configuration.</p> <p>Parameters:</p> Name Type Description Default <code>config</code> <code>AVDConfiguration</code> <p>AVDConfiguration instance</p> required <code>force</code> <code>bool</code> <p>Overwrite existing AVD if True</p> <code>False</code> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if AVD was created successfully</p> <p>Raises:</p> Type Description <code>AVDCreationError</code> <p>If creation fails</p>"},{"location":"api/avd/#android_device_manager.avd.AVDManager.delete","title":"<code>delete(name)</code>","text":"<p>Delete an existing AVD by name.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Name of the AVD to delete</p> required <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if AVD was deleted successfully</p> <p>Raises:</p> Type Description <code>AVDDeletionError</code> <p>If AVD deletion fails</p>"},{"location":"api/avd/#android_device_manager.avd.AVDManager.list","title":"<code>list()</code>","text":"<p>List all available AVD names.</p> <p>Returns:</p> Type Description <code>List[str]</code> <p>List[str]: Names of all available AVDs</p>"},{"location":"api/avd/#android_device_manager.avd.AVDConfiguration","title":"<code>android_device_manager.avd.AVDConfiguration</code>  <code>dataclass</code>","text":"<p>Configuration for an Android Virtual Device (AVD).</p> <p>This dataclass encapsulates the minimal configuration needed to define an Android Virtual Device, such as its name and the associated system image package.</p> <p>Attributes:</p> Name Type Description <code>name</code> <code>str</code> <p>The name of the AVD (must be unique within the Android SDK).</p> <code>package</code> <code>str</code> <p>The system image package path (e.g. \"system-images;android-34;google_apis;x86_64\").</p>"},{"location":"api/avd/#android_device_manager.avd.exceptions","title":"<code>android_device_manager.avd.exceptions</code>","text":""},{"location":"api/avd/#android_device_manager.avd.exceptions-classes","title":"Classes","text":""},{"location":"api/avd/#android_device_manager.avd.exceptions.AVDCreationError","title":"<code>AVDCreationError</code>","text":"<p>               Bases: <code>AndroidDeviceManagerError</code></p> <p>Raised when the creation of an Android Virtual Device (AVD) fails.</p> <p>Attributes:</p> Name Type Description <code>name</code> <code>str</code> <p>The name of the AVD for which creation failed.</p> <code>message</code> <code>str</code> <p>Details about the cause of the failure.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The name of the AVD.</p> required <code>message</code> <code>str</code> <p>Description of the creation error.</p> required"},{"location":"api/avd/#android_device_manager.avd.exceptions.AVDDeletionError","title":"<code>AVDDeletionError</code>","text":"<p>               Bases: <code>AndroidDeviceManagerError</code></p> <p>Raised when the deletion of an Android Virtual Device (AVD) fails.</p> <p>Attributes:</p> Name Type Description <code>name</code> <code>str</code> <p>The name of the AVD for which deletion failed.</p> <code>message</code> <code>str</code> <p>Details about the cause of the failure.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The name of the AVD.</p> required <code>message</code> <code>str</code> <p>Description of the deletion error.</p> required"},{"location":"api/constants/","title":"Constants","text":""},{"location":"api/constants/#android_device_manager.AndroidProp","title":"<code>android_device_manager.AndroidProp</code>","text":"<p>               Bases: <code>Enum</code></p> <p>Common Android system properties for use with adb shell getprop.</p>"},{"location":"api/constants/#android_device_manager.AndroidProp-attributes","title":"Attributes","text":""},{"location":"api/constants/#android_device_manager.AndroidProp.ANDROID_VERSION","title":"<code>ANDROID_VERSION = 'ro.build.version.release'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Android OS version string (e.g. \"12\", \"13\")</p>"},{"location":"api/constants/#android_device_manager.AndroidProp.API_LEVEL","title":"<code>API_LEVEL = 'ro.build.version.sdk'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Android API level (e.g. \"34\")</p>"},{"location":"api/constants/#android_device_manager.AndroidProp.DEVICE_MODEL","title":"<code>DEVICE_MODEL = 'ro.product.model'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Device model name (e.g. \"Pixel 5\")</p>"},{"location":"api/constants/#android_device_manager.AndroidProp.MANUFACTURER","title":"<code>MANUFACTURER = 'ro.product.manufacturer'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Device manufacturer (e.g. \"Google\")</p>"},{"location":"api/constants/#android_device_manager.AndroidProp.BRAND","title":"<code>BRAND = 'ro.product.brand'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Device brand (e.g. \"Pixel\")</p>"},{"location":"api/constants/#android_device_manager.AndroidProp.BOARD","title":"<code>BOARD = 'ro.product.board'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Device board (e.g. \"goldfish_x86_64\")</p>"},{"location":"api/constants/#android_device_manager.AndroidProp.BOOTLOADER","title":"<code>BOOTLOADER = 'ro.bootloader'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Bootloader version</p>"},{"location":"api/constants/#android_device_manager.AndroidProp.FINGERPRINT","title":"<code>FINGERPRINT = 'ro.build.fingerprint'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Full build fingerprint (unique ID for the build)</p>"},{"location":"api/constants/#android_device_manager.AndroidProp.BUILD_ID","title":"<code>BUILD_ID = 'ro.build.display.id'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Build display ID (e.g. \"TQ3A.230805.001\")</p>"},{"location":"api/constants/#android_device_manager.AndroidProp.HARDWARE","title":"<code>HARDWARE = 'ro.hardware'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Hardware name (e.g. \"ranchu\")</p>"},{"location":"api/constants/#android_device_manager.AndroidProp.BOOT_COMPLETED","title":"<code>BOOT_COMPLETED = 'sys.boot_completed'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Indicates if system boot completed (should be \"1\" when ready)</p>"},{"location":"api/constants/#android_device_manager.AndroidProp.BOOTANIM","title":"<code>BOOTANIM = 'init.svc.bootanim'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Boot animation service status (should be \"stopped\" when fully booted)</p>"},{"location":"api/constants/#android_device_manager.AndroidProp.FIRST_BOOT_COMPLETED","title":"<code>FIRST_BOOT_COMPLETED = 'sys.bootstat.first_boot_completed'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>First boot completed marker (value \"1\" when fully booted)</p>"},{"location":"api/constants/#android_device_manager.AndroidProp.SERIAL","title":"<code>SERIAL = 'ro.serialno'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Device serial number</p>"},{"location":"api/emulator/","title":"Emulator Module","text":"<p>Emulate Android Virtual Devices (AVDs).</p>"},{"location":"api/emulator/#android_device_manager.emulator.EmulatorManager","title":"<code>android_device_manager.emulator.EmulatorManager</code>","text":"<p>Manager for starting and stopping Android emulator instances.</p>"},{"location":"api/emulator/#android_device_manager.emulator.EmulatorManager-functions","title":"Functions","text":""},{"location":"api/emulator/#android_device_manager.emulator.EmulatorManager.__init__","title":"<code>__init__(sdk)</code>","text":"<p>Initialize the EmulatorManager.</p> <p>Parameters:</p> Name Type Description Default <code>sdk</code> <code>AndroidSDK</code> <p>The SDK wrapper containing the path to the emulator.</p> required"},{"location":"api/emulator/#android_device_manager.emulator.EmulatorManager.start_emulator","title":"<code>start_emulator(avd_name, emulator_config=None)</code>","text":"<p>Start an Android emulator for a given AVD.</p> <p>Parameters:</p> Name Type Description Default <code>avd_name</code> <code>str</code> <p>The name of the AVD to start.</p> required <code>emulator_config</code> <code>Optional[EmulatorConfiguration]</code> <p>Optional configuration for the emulator.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>int</code> <code>int</code> <p>The port on which the emulator is running.</p> <p>Raises:</p> Type Description <code>EmulatorPortAllocationError</code> <p>If no free emulator port can be found.</p> <code>EmulatorStartError</code> <p>If the emulator fails to start.</p>"},{"location":"api/emulator/#android_device_manager.emulator.EmulatorManager.stop_emulator","title":"<code>stop_emulator()</code>","text":"<p>Stop the currently running emulator process.</p> <p>Terminates the emulator process if it is still running. If the process does not stop gracefully within 10 seconds, it is forcibly killed.</p>"},{"location":"api/emulator/#android_device_manager.emulator.EmulatorManager.__del__","title":"<code>__del__()</code>","text":"<p>Cleanup emulator process on destruction.</p>"},{"location":"api/emulator/#android_device_manager.emulator.EmulatorConfiguration","title":"<code>android_device_manager.emulator.EmulatorConfiguration</code>  <code>dataclass</code>","text":"<p>Configuration options for the Android emulator.</p> <p>This dataclass encapsulates various parameters that can be passed to the Android emulator at startup. Each field corresponds to a common emulator option.</p> <p>Attributes:</p> Name Type Description <code>no_window</code> <code>bool</code> <p>If True, launch the emulator without a window (headless).</p> <code>no_audio</code> <code>bool</code> <p>If True, disable audio in the emulator.</p> <code>gpu</code> <code>str</code> <p>GPU emulation mode (default \"auto\", e.g., \"host\", \"swiftshader_indirect\").</p> <code>memory</code> <code>Optional[int]</code> <p>Memory (in MB) to allocate for the emulator.</p> <code>cores</code> <code>Optional[int]</code> <p>Number of CPU cores for the emulator.</p> <code>wipe_data</code> <code>bool</code> <p>If True, wipe user data when starting the emulator.</p> <code>no_snapshot</code> <code>bool</code> <p>If True, disable snapshots.</p> <code>cold_boot</code> <code>bool</code> <p>If True, force cold boot (do not load quick-boot snapshot).</p> <code>netdelay</code> <code>str</code> <p>Network delay profile (e.g., \"none\", \"gsm\", \"edge\", \"umts\").</p> <code>netspeed</code> <code>str</code> <p>Network speed profile (e.g., \"full\", \"gsm\", \"edge\").</p> <code>verbose</code> <code>bool</code> <p>If True, enable verbose output.</p>"},{"location":"api/emulator/#android_device_manager.emulator.EmulatorConfiguration-functions","title":"Functions","text":""},{"location":"api/emulator/#android_device_manager.emulator.EmulatorConfiguration.to_args","title":"<code>to_args()</code>","text":"<p>Convert the configuration to a list of command-line arguments for the emulator.</p> <p>Returns:</p> Type Description <code>List[str]</code> <p>List[str]: The list of emulator CLI arguments corresponding to this configuration.</p>"},{"location":"api/emulator/#android_device_manager.emulator.exceptions","title":"<code>android_device_manager.emulator.exceptions</code>","text":""},{"location":"api/emulator/#android_device_manager.emulator.exceptions-classes","title":"Classes","text":""},{"location":"api/emulator/#android_device_manager.emulator.exceptions.EmulatorPortAllocationError","title":"<code>EmulatorPortAllocationError</code>","text":"<p>               Bases: <code>AndroidDeviceManagerError</code></p> <p>Exception raised when the emulator fails to allocate a valid port.</p> <p>This error typically occurs when there are no available ports or when the requested port is already in use.</p>"},{"location":"api/emulator/#android_device_manager.emulator.exceptions.EmulatorStartError","title":"<code>EmulatorStartError</code>","text":"<p>               Bases: <code>AndroidDeviceManagerError</code></p> <p>Exception raised when the Android emulator fails to start properly.</p>"},{"location":"examples/apk-management/","title":"APK Management","text":""},{"location":"examples/apk-management/#install-list-and-uninstall-apks","title":"Install, list, and uninstall APKs","text":"<pre><code>from android_device_manager import AndroidDevice\nfrom android_device_manager.avd import AVDConfiguration\nfrom android_device_manager.emulator import EmulatorConfiguration\n\n# Configure your AVD\navd_config = AVDConfiguration(\n    name=\"example_avd\",\n    package=\"system-images;android-34;google_apis;x86_64\"\n)\n\n# Configure your Emulator\nemulator_config = EmulatorConfiguration(\n    no_window=True\n)\n\nwith AndroidDevice(avd_config,emulator_config) as device:\n    # Install APK\n    device.install_apk(\"/path/to/app.apk\")\n\n    # List installed packages\n    packages = device.list_installed_packages()\n    print(\"Installed packages:\")\n    for p in packages:\n        print(f\"\\t- {p}\")\n\n    # Uninstall package\n    device.uninstall_package(\"com.example.app\")\n</code></pre>"},{"location":"examples/automation/","title":"Automation Workflow","text":""},{"location":"examples/automation/#full-automated-test-setup","title":"Full Automated Test Setup","text":"<p>This example demonstrates a full automation scenario: - Create and start an emulator - Install an application - Retrieve logs - Capture a screenshot</p> <pre><code>from android_device_manager import AndroidDevice\nfrom android_device_manager.avd.config import AVDConfiguration\nfrom android_device_manager.emulator.config import EmulatorConfiguration\n\n# Configure the AVD\navd_config = AVDConfiguration(\n    name=\"automation_avd\",\n    package=\"system-images;android-34;google_apis;x86_64\"\n)\n\n# Configure the Emulator\nemulator_config = EmulatorConfiguration(\n    no_window=True\n)\n\n# APK path\napk_path = \"/path/to/app.apk\"\n\nwith AndroidDevice(avd_config, emulator_config) as device:\n    print(f\"Device {device.name} started.\")\n\n    # Install application\n    device.install_apk(apk_path)\n    print(\"APK installed.\")\n\n    # Retrieve logs\n    logs = device.get_logcat()\n    print(\"Captured logs:\")\n    print(logs)\n\n    # Capture screenshot\n    screenshot_path = \"screenshot.png\"\n    device.shell([\"screencap\", \"-p\", f\"/tmp/{screenshot_path}\"])\n    device.pull_file(f\"/tmp/{screenshot_path}\", screenshot_path)\n    print(f\"Screenshot saved to {screenshot_path}\")\n</code></pre>"},{"location":"examples/basic-usage/","title":"Basic Usage","text":""},{"location":"examples/basic-usage/#create-start-and-stop-an-emulator-with-custom-configuration","title":"Create, start, and stop an emulator with custom configuration","text":"<pre><code>from android_device_manager import AndroidDevice\nfrom android_device_manager.avd import AVDConfiguration\nfrom android_device_manager.emulator import EmulatorConfiguration\n\n# Configure your AVD\navd_config = AVDConfiguration(\n    name=\"example_avd\",\n    package=\"system-images;android-34;google_apis;x86_64\"\n)\n\n# Configure your Emulator\nemulator_config = EmulatorConfiguration(\n    no_window=True\n)\n\n# Manage the device lifecycle automatically\nwith AndroidDevice(avd_config, emulator_config) as device:\n    print(f\"Device {device.name} is running.\")\n</code></pre> <p>This example:</p> <ol> <li> <p>Creates the AVD if it does not exist.</p> </li> <li> <p>Starts the emulator in headless mode (no window).</p> </li> <li> <p>Stops and deletes the AVD automatically when exiting the context.</p> </li> </ol>"},{"location":"examples/device-info/","title":"Device Info &amp; Properties","text":""},{"location":"examples/device-info/#retrieve-system-properties","title":"Retrieve system properties","text":"<pre><code>from android_device_manager import AndroidDevice, AndroidProp\nfrom android_device_manager.avd import AVDConfiguration\nfrom android_device_manager.emulator import EmulatorConfiguration\n\n# Configure the AVD\navd_config = AVDConfiguration(\n    name=\"test_avd_from_lib\",\n    package=\"system-images;android-36;google_apis;x86_64\"\n)\n\n# Configure the Emulator (headless mode)\nemulator_config = EmulatorConfiguration(\n    no_window=True,\n)\n\n# Start and query the device\nwith AndroidDevice(avd_config, emulator_config=emulator_config) as device:\n    api_level = device.get_prop(AndroidProp.API_LEVEL)\n    android_version = device.get_prop(\"ro.build.version.release\")\n    print(f\"API Level: {api_level}, Android: {android_version}\")\n</code></pre> <p>This example:</p> <ol> <li> <p>Starts an emulator for the specified AVD in headless mode.</p> </li> <li> <p>Retrieves the device API level using an AndroidProp enum.</p> </li> <li> <p>Retrieves the Android version directly using a property key.</p> </li> </ol>"},{"location":"examples/file-operations/","title":"File Operations","text":""},{"location":"examples/file-operations/#push-and-pull-files","title":"Push and Pull Files","text":"<pre><code>from android_device_manager import AndroidDevice\nfrom android_device_manager.avd import AVDConfiguration\nfrom android_device_manager.emulator import EmulatorConfiguration\n\n# Configure the AVD\navd_config = AVDConfiguration(\n    name=\"test_avd_from_lib\",\n    package=\"system-images;android-36;google_apis;x86_64\"\n)\n\n# Configure the Emulator (headless mode)\nemulator_config = EmulatorConfiguration(\n    no_window=True,\n)\n\nwith AndroidDevice(avd_config, emulator_config=emulator_config) as device:\n    # Push a file\n    device.push_file(\"local.txt\", \"/tmp/local.txt\")\n\n    # Pull a file\n    device.pull_file(\"/tmp/local.txt\", \"downloaded.txt\")\n</code></pre>"},{"location":"examples/advanced/","title":"Advanced Examples","text":"<p>This section provides low-level usage examples for advanced users who want to interact directly with individual components instead of the high-level <code>AndroidDevice</code> abstraction.</p> <p>Available advanced examples:</p> <ul> <li>Using AdbClient</li> <li>Using AVDManager</li> <li>Using EmulatorManager</li> </ul>"},{"location":"examples/advanced/adbclient/","title":"Advanced: Using <code>AdbClient</code>","text":"<p>The <code>AdbClient</code> class provides low-level access to the Android Debug Bridge (ADB) for a running emulator/device.</p> <p>Info</p> <p>This interface is intended for advanced users who want to directly run commands, manage files, install/uninstall APKs, or query system information without going through the high-level <code>AndroidDevice</code> abstraction.</p>"},{"location":"examples/advanced/adbclient/#when-to-use-adbclient","title":"When to use <code>AdbClient</code>","text":"<p>You might prefer <code>AdbClient</code> over <code>AndroidDevice</code> when: - You want fine-grained control over ADB commands. - You need to run custom shell commands. - You want to manipulate files or query system properties without creating/deleting AVDs.</p>"},{"location":"examples/advanced/adbclient/#initializing-adbclient","title":"Initializing <code>AdbClient</code>","text":"<pre><code>from android_device_manager.adb.client import AdbClient\nfrom android_device_manager.utils.android_sdk import AndroidSDK\n\nsdk = AndroidSDK()\nport = 5554  # Replace with the actual emulator port\n\nadb_client = AdbClient(port, sdk)\nadb_client.wait_for_boot()  # Wait until the emulator is fully booted\nprint(\"Emulator is ready!\")\n</code></pre>"},{"location":"examples/advanced/adbclient/#key-features-and-examples","title":"Key Features and Examples","text":""},{"location":"examples/advanced/adbclient/#1-query-system-properties","title":"1\ufe0f\u20e3 Query System Properties","text":"<p>Retrieve device properties (API level, Android version, manufacturer, etc.).</p> <pre><code>from android_device_manager.constants import AndroidProp\n\n# Get a specific property\napi_level = adb_client.get_prop(AndroidProp.API_LEVEL)\nprint(\"API Level:\", api_level)\n\n# Or by string\nandroid_version = adb_client.get_prop(\"ro.build.version.release\")\nprint(\"Android Version:\", android_version)\n\n# Get all properties\nall_props = adb_client.get_all_props()\nprint(\"All properties:\", all_props)\n</code></pre>"},{"location":"examples/advanced/adbclient/#2-install-and-uninstall-apks","title":"2\ufe0f\u20e3 Install and Uninstall APKs","text":"<p>Install or remove applications from the emulator.</p> <pre><code>apk_path = \"/path/to/app.apk\"\n\n# Install APK\nadb_client.install_apk(apk_path)\nprint(\"APK installed successfully.\")\n\n# List installed packages\npackages = adb_client.list_installed_packages()\nprint(\"Installed packages:\", packages)\n\n# Uninstall APK\nadb_client.uninstall_package(\"com.example.app\")\nprint(\"Package uninstalled.\")\n</code></pre>"},{"location":"examples/advanced/adbclient/#3-file-operations","title":"3\ufe0f\u20e3 File Operations","text":"<p>Copy files between the host and the emulator.</p> <pre><code># Push file to /sdcard\nadb_client.push_file(\"local_file.txt\", \"/sdcard/remote_file.txt\")\nprint(\"File pushed to emulator.\")\n\n# Pull file from /sdcard\nadb_client.pull_file(\"/sdcard/remote_file.txt\", \"downloaded_file.txt\")\nprint(\"File pulled from emulator.\")\n</code></pre>"},{"location":"examples/advanced/adbclient/#4-log-management","title":"4\ufe0f\u20e3 Log Management","text":"<p>Access or clear the device logs.</p> <pre><code># Retrieve logcat output\nlogs = adb_client.get_logcat()\nprint(\"Logs:\", logs)\n\n# Clear logcat buffer\nadb_client.clear_logcat()\nprint(\"Logcat cleared.\")\n</code></pre>"},{"location":"examples/advanced/adbclient/#5-execute-shell-commands","title":"5\ufe0f\u20e3 Execute Shell Commands","text":"<p>Run shell commands directly inside the emulator.</p> <pre><code># List files in /sdcard\nresult = adb_client.shell([\"ls\", \"/sdcard\"])\nprint(\"Files in /sdcard:\", result.stdout)\n\n# Create a directory\nadb_client.shell([\"mkdir\", \"/sdcard/test_dir\"])\n</code></pre> <p>Warning</p> <p>Avoid using destructive commands (<code>stop</code>, <code>reboot</code>, <code>poweroff</code>) unless you handle emulator state manually.  </p>"},{"location":"examples/advanced/adbclient/#6-root-access","title":"6\ufe0f\u20e3 Root Access","text":"<p>Gain root privileges (if supported by the emulator image).</p> <pre><code># Enable root\nif adb_client.root():\n    print(\"ADB is now running as root.\")\nelse:\n    print(\"Root access not available.\")\n\n# Check root status\nprint(\"Is root?\", adb_client.is_root())\n\n# Disable root\nadb_client.unroot()\nprint(\"Root disabled.\")\n</code></pre>"},{"location":"examples/advanced/adbclient/#7-stop-emulator","title":"7\ufe0f\u20e3 Stop Emulator","text":"<p>Shut down the emulator instance cleanly.</p> <pre><code>adb_client.kill_emulator()\nprint(\"Emulator killed.\")\n</code></pre>"},{"location":"examples/advanced/adbclient/#notes-for-advanced-users","title":"\ud83d\udd0d Notes for Advanced Users","text":"<ul> <li><code>AdbClient</code> does not manage emulator lifecycle \u2014 you must ensure an emulator is running before using it.</li> <li>Some commands require <code>root()</code> to be called before execution.</li> <li>Avoid long-running or blocking commands in automation workflows without adjusting <code>timeout</code> parameters.</li> <li>For bulk file transfers (like <code>/data</code>), ensure proper permissions and storage space on the host.</li> </ul> <p>\u2705 <code>AdbClient</code> is ideal when you want direct control of an emulator without the overhead of creating/managing it via <code>AndroidDevice</code>.</p>"},{"location":"examples/advanced/avdmanager/","title":"AVDManager \u2014 Advanced Usage","text":"<p>The <code>AVDManager</code> class provides programmatic access to the Android Virtual Device (AVD) management functionalities, wrapping the <code>avdmanager</code> CLI commands with Python.  </p> <p>It can be used directly to create, list, and delete AVDs without relying on the higher-level <code>AndroidDevice</code> abstraction.</p>"},{"location":"examples/advanced/avdmanager/#import-and-initialization","title":"\ud83d\udce6 Import and Initialization","text":"<p>To use <code>AVDManager</code>, you need an initialized <code>AndroidSDK</code> (which automatically locates your SDK tools):</p> <pre><code>from android_device_manager.avd.manager import AVDManager\nfrom android_device_manager.avd.config import AVDConfiguration\nfrom android_device_manager.utils.android_sdk import AndroidSDK\n\n# Initialize SDK and AVDManager\nsdk = AndroidSDK()\navd_manager = AVDManager(sdk)\n</code></pre>"},{"location":"examples/advanced/avdmanager/#creating-an-avd","title":"\ud83c\udd95 Creating an AVD","text":"<p>The <code>create()</code> method creates a new virtual device. You need an <code>AVDConfiguration</code> specifying at least a name and a system image package.</p> <pre><code>avd_config = AVDConfiguration(\n    name=\"advanced_avd\",\n    package=\"system-images;android-34;google_apis;x86_64\"\n)\n\ntry:\n    avd_manager.create(avd_config, force=False)\n    print(\"AVD created successfully.\")\nexcept Exception as e:\n    print(f\"Failed to create AVD: {e}\")\n</code></pre> <p>Note</p> <ul> <li>The AVD name must follow Android naming rules (letters, digits, <code>_</code>, <code>-</code>, starting with a letter).</li> <li>If <code>force=True</code> is set, an existing AVD with the same name will be overwritten.</li> </ul>"},{"location":"examples/advanced/avdmanager/#listing-avds","title":"\ud83d\udcdc Listing AVDs","text":"<p>You can retrieve the list of existing AVDs using the <code>list()</code> method.</p> <pre><code>avd_list = avd_manager.list()\nprint(\"Available AVDs:\")\nfor avd in avd_list:\n    print(f\" - {avd}\")\n</code></pre> <p>Example output:</p> <pre><code>Available AVDs:\n - Pixel_5_API_34\n - advanced_avd\n</code></pre>"},{"location":"examples/advanced/avdmanager/#checking-if-an-avd-exists","title":"\ud83d\udd0d Checking if an AVD Exists","text":"<p>You can check for the existence of a specific AVD:</p> <pre><code>if avd_manager.exist(\"advanced_avd\"):\n    print(\"The AVD exists.\")\nelse:\n    print(\"The AVD does not exist.\")\n</code></pre>"},{"location":"examples/advanced/avdmanager/#deleting-an-avd","title":"\ud83d\uddd1\ufe0f Deleting an AVD","text":"<p>The <code>delete()</code> method removes a specific AVD by name:</p> <pre><code>try:\n    avd_manager.delete(\"advanced_avd\")\n    print(\"AVD deleted successfully.\")\nexcept Exception as e:\n    print(f\"Failed to delete AVD: {e}\")\n</code></pre> <p>If the AVD does not exist, <code>delete()</code> will log a warning but will not raise an error.</p>"},{"location":"examples/advanced/avdmanager/#under-the-hood","title":"\ud83d\udee0\ufe0f Under the Hood","text":"<p>Internally, <code>AVDManager</code>: - Uses <code>avdmanager create avd</code> and <code>avdmanager delete avd</code> CLI commands. - Validates AVD names with <code>is_valid_avd_name()</code>. - Checks if the system image package is installed through <code>SDKManager</code>.</p> <p>Advanced users can directly call <code>_run_avd_command()</code> to execute raw <code>avdmanager</code> commands:</p> <pre><code>result = avd_manager._run_avd_command([\"list\", \"avd\"], timeout=30)\nprint(result.stdout)\n</code></pre>"},{"location":"examples/advanced/avdmanager/#common-pitfalls","title":"\u26a0\ufe0f Common Pitfalls","text":"<ul> <li>System image not installed: Ensure your package (<code>system-images;android-XX;google_apis;x86_64</code>) is installed via <code>sdkmanager</code>.</li> <li>Invalid names: Follow Android AVD naming rules (no spaces, must start with a letter).</li> <li>Permissions: Ensure you have write access to the <code>.android/avd</code> directory.</li> </ul> <p>\ud83d\udc49 This advanced control over AVDs is useful when you want to script emulator environments, clean up AVDs, or prepare devices dynamically in CI pipelines.</p>"},{"location":"examples/advanced/emulatormanager/","title":"Advanced Usage: <code>EmulatorManager</code>","text":"<p>The <code>EmulatorManager</code> is responsible for managing Android Emulator instances from Python, without relying on Android Studio's graphical interface. It provides low-level control to start, stop, and allocate emulator ports programmatically.</p>"},{"location":"examples/advanced/emulatormanager/#overview","title":"Overview","text":"<p>The <code>EmulatorManager</code> acts as a thin wrapper around the <code>emulator</code> binary found in your Android SDK.</p> <p>Main features: - Find and allocate free emulator ports automatically. - Start emulators with a specific AVD and optional configuration. - Stop emulators gracefully or forcibly. - Fully compatible with headless and automated environments.</p>"},{"location":"examples/advanced/emulatormanager/#initialization","title":"Initialization","text":"<p>To use <code>EmulatorManager</code>, you must provide an instance of <code>AndroidSDK</code> so the class can locate the <code>emulator</code> executable.</p> <pre><code>from android_device_manager.emulator import EmulatorManager\nfrom android_device_manager.utils.android_sdk import AndroidSDK\n\nsdk = AndroidSDK()  # Automatically detects the SDK path\nemulator_manager = EmulatorManager(sdk)\n</code></pre>"},{"location":"examples/advanced/emulatormanager/#starting-an-emulator","title":"Starting an Emulator","text":"<p>You can start an emulator by specifying the AVD name. Optionally, you can provide an <code>EmulatorConfiguration</code> to control runtime settings like GPU mode, memory, and cold boot.</p> <pre><code>from android_device_manager.emulator import EmulatorConfiguration\n\n# Configure emulator to run headless\nemu_config = EmulatorConfiguration(\n    no_window=True,\n    gpu=\"swiftshader_indirect\",\n    cold_boot=True\n)\n\n# Start emulator for AVD named \"test_avd\"\nport = emulator_manager.start_emulator(\"test_avd\", emulator_config=emu_config)\n\nprint(f\"Emulator started on port {port}\")\n</code></pre> <p>Key details:</p> <ul> <li>A free port is automatically selected between <code>DEFAULT_EMULATOR_PORT_START</code> and <code>DEFAULT_EMULATOR_PORT_END</code>.</li> <li>If no free port is available, an <code>EmulatorPortAllocationError</code> is raised.</li> <li>If the emulator fails to start, an <code>EmulatorStartError</code> is raised with logs.</li> </ul>"},{"location":"examples/advanced/emulatormanager/#stopping-an-emulator","title":"Stopping an Emulator","text":"<p>Stopping the emulator is straightforward. The manager first attempts to terminate the process gracefully, and if it does not stop within 10 seconds, it is killed.</p> <pre><code>emulator_manager.stop_emulator()\nprint(\"Emulator stopped.\")\n</code></pre>"},{"location":"examples/advanced/emulatormanager/#port-allocation","title":"Port Allocation","text":"<p>By default, emulator ports are allocated in even-numbered ranges starting at <code>5554</code>. This is the same behavior as the official Android Emulator.</p> <p>You can find a free port using the private static method <code>_find_free_emulator_port</code>:</p> <pre><code>free_port = emulator_manager._find_free_emulator_port()\nprint(f\"Free emulator port: {free_port}\")\n</code></pre> <p>Warning</p> <p>This is an internal method. Normally, you don't need to call it manually because <code>start_emulator()</code> handles port allocation automatically.</p>"},{"location":"examples/advanced/emulatormanager/#full-example","title":"Full Example","text":"<p>Here is a complete advanced example that: 1. Starts an emulator in headless mode. 2. Runs it for 15 seconds. 3. Stops it gracefully.</p> <pre><code>import time\nfrom android_device_manager.utils.android_sdk import AndroidSDK\nfrom android_device_manager.emulator.manager import EmulatorManager\nfrom android_device_manager.emulator.config import EmulatorConfiguration\n\n# Initialize SDK and Emulator Manager\nsdk = AndroidSDK()\nemulator_manager = EmulatorManager(sdk)\n\n# Emulator configuration (headless)\nemu_config = EmulatorConfiguration(no_window=True, cold_boot=True)\n\n# Start emulator\ntry:\n    port = emulator_manager.start_emulator(\"test_avd\", emulator_config=emu_config)\n    print(f\"Emulator started on port {port}\")\n\n    # Simulate work\n    time.sleep(15)\n\nfinally:\n    # Stop emulator\n    emulator_manager.stop_emulator()\n    print(\"Emulator stopped.\")\n</code></pre>"},{"location":"examples/advanced/emulatormanager/#best-practices","title":"Best Practices","text":"<ul> <li>Always stop emulators after usage to free system resources.</li> <li>Use <code>no_window=True</code> in automated pipelines to avoid UI pop-ups.</li> <li>Combine <code>EmulatorManager</code> with <code>AdbClient</code> for deeper automation (installing APKs, running tests, etc.).</li> <li>If running multiple emulators, ensure there are enough free ports.</li> </ul>"},{"location":"examples/advanced/emulatormanager/#exceptions","title":"Exceptions","text":"<p>The <code>EmulatorManager</code> raises specific exceptions for better error handling:</p> <ul> <li> <p><code>EmulatorPortAllocationError</code>   Raised when no free emulator port can be found.</p> </li> <li> <p><code>EmulatorStartError</code>   Raised when the emulator process fails to start.</p> </li> </ul> <p>These exceptions can be caught individually or through the base exception class.</p>"},{"location":"getting-started/installation/","title":"Installation","text":""},{"location":"getting-started/installation/#requirements","title":"\ud83d\udc0d Requirements","text":"<p>Before installing android-device-manager, ensure you have:</p> <ul> <li>Python 3.10 or higher</li> <li>Android SDK installed and configured</li> </ul>"},{"location":"getting-started/installation/#android-sdk-setup","title":"Android SDK Setup","text":""},{"location":"getting-started/installation/#option-1-android-studio","title":"Option 1: Android Studio","text":"<ol> <li>Download and install Android Studio</li> <li>Open Android Studio and follow the setup wizard</li> <li>Install additional SDK packages through SDK Manager</li> </ol>"},{"location":"getting-started/installation/#option-2-command-line-tools","title":"Option 2: Command Line Tools","text":""},{"location":"getting-started/installation/#installing-command-line-tools","title":"Installing Command Line Tools","text":"<pre><code># Download command line tools\n# August 2025 version - check for the latest version at:\n# https://developer.android.com/studio#command-line-tools-only\nwget https://dl.google.com/android/repository/commandlinetools-linux-13114758_latest.zip\n\n# Extract and organize files\nunzip commandlinetools-linux-13114758_latest.zip\nmkdir -p ~/Android/Sdk/cmdline-tools/latest\nmv cmdline-tools/* ~/Android/Sdk/cmdline-tools/latest/\n\n# Cleanup\nrm -rf cmdline-tools commandlinetools-linux-13114758_latest.zip\n</code></pre>"},{"location":"getting-started/installation/#setting-up-environment-variables","title":"Setting Up Environment Variables","text":"<pre><code># Add these lines to your ~/.bashrc or ~/.zshrc\nexport ANDROID_HOME=$HOME/Android/Sdk\nexport PATH=$PATH:$ANDROID_HOME/cmdline-tools/latest/bin\nexport PATH=$PATH:$ANDROID_HOME/platform-tools\nexport PATH=$PATH:$ANDROID_HOME/emulator\n\n# Reload your configuration\nsource ~/.bashrc  # or source ~/.zshrc\n</code></pre>"},{"location":"getting-started/installation/#installing-essential-components","title":"Installing Essential Components","text":"<pre><code># Accept licenses\nyes | sdkmanager --licenses\n\n# Install basic tools\nsdkmanager \"platform-tools\"\nsdkmanager \"emulator\"\n</code></pre>"},{"location":"getting-started/installation/#verifying-installation","title":"Verifying Installation","text":"<p>To verify everything works correctly:</p> <pre><code># Check that tools are accessible\nadb version\nemulator -version\n\n# List installed packages\nsdkmanager --list_installed\n</code></pre>"},{"location":"getting-started/installation/#install-android-device-manager","title":"Install android-device-manager","text":""},{"location":"getting-started/installation/#from-pypi-recommended","title":"\ud83d\udce6 From PyPI (Recommended)","text":"<pre><code>pip install android-device-manager\n</code></pre>"},{"location":"getting-started/installation/#from-source","title":"\ud83d\udea7 From Source","text":"<pre><code>git clone https://github.com/jwoirhaye/android-device-manager-python.git\ncd android-device-manager-python\npip install -e .\n</code></pre>"},{"location":"getting-started/quickstart/","title":"Quickstart","text":"<p>Welcome to Android Device Manager! This quickstart guide will walk you through the essential steps to create, run, and interact with an Android Device using the library.</p>"},{"location":"getting-started/quickstart/#1-verify-installation","title":"1\ufe0f\u20e3 Verify Installation","text":"<p>After following the Installation Guide, verify your setup:</p> <pre><code>adb version\nemulator -version\navdmanager list available\n</code></pre> <p>You should see the versions of each tool and the list of available system images.</p>"},{"location":"getting-started/quickstart/#2-minimal-example-create-run-an-emulator","title":"2\ufe0f\u20e3 Minimal Example \u2014 Create &amp; Run an Emulator","text":"<p>With everything set up, here\u2019s the simplest way to create and run an emulator:</p> <pre><code>from android_device_manager import AndroidDevice\nfrom android_device_manager.avd import AVDConfiguration\nfrom android_device_manager.emulator import EmulatorConfiguration\n\n# Define AVD configuration\navd_config = AVDConfiguration(\n    name=\"quickstart_avd\",\n    package=\"system-images;android-34;google_apis;x86_64\"\n)\n\n# Define Emulator configuration\nemulator_config = EmulatorConfiguration(\n    no_window=True  # Run emulator in headless mode\n)\n\n# Create and run the device using context manager\nwith AndroidDevice(avd_config, emulator_config) as device:\n    print(f\"Device {device.name} is running.\")\n</code></pre> <p>\u2705 What happens here:</p> <ul> <li>The AVD is created if it doesn\u2019t already exist.</li> <li>The emulator is started.</li> <li>When the context exits, the emulator is stopped and the AVD is cleaned up.</li> </ul>"},{"location":"getting-started/quickstart/#3-interact-with-the-device","title":"3\ufe0f\u20e3 Interact with the Device","text":"<p>While the emulator is running, you can: constants - Install APKs - List installed packages - Read system properties</p> <p>Example: <pre><code>from android_device_manager import AndroidProp\n\npackages = device.list_installed_packages()\nprint(\"Installed packages:\", packages[:5])\n\nandroid_version = device.get_prop(AndroidProp.ANDROID_VERSION)\nprint(f\"Android version: {android_version}\")\n</code></pre></p>"}]}